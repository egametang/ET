//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace ET
{

public sealed partial class BuffConfig :  Bright.Config.BeanBase 
{
    public BuffConfig(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Name = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);BuffTriggers = new System.Collections.Generic.List<BuffTrigger>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { BuffTrigger _e0;  _e0 = BuffTrigger.DeserializeBuffTrigger(_buf); BuffTriggers.Add(_e0);}}
        Desc = _buf.ReadString();
        VoidCaster = BuffVoidCaster.Base.DeserializeBase(_buf);
        OverrideType = (BuffOverrideType)_buf.ReadInt();
        AddLayer = _buf.ReadInt();
        ReduceLayer = _buf.ReadInt();
        ActiveTime = _buf.ReadInt();
        DispelType = (BuffDispelType)_buf.ReadInt();
        CanDisplay = _buf.ReadBool();
        BuffGroup = (BuffGroup)_buf.ReadInt();
        PostInit();
    }

    public static BuffConfig DeserializeBuffConfig(ByteBuf _buf)
    {
        return new BuffConfig(_buf);
    }

    /// <summary>
    /// id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; private set; }
    public System.Collections.Generic.List<BuffTrigger> BuffTriggers { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 虚空释放者<br/>释放者是用来处理相同Buff的合并问题
    /// </summary>
    public BuffVoidCaster.Base VoidCaster { get; private set; }
    /// <summary>
    /// 覆盖方式：叠加|覆盖|延长
    /// </summary>
    public BuffOverrideType OverrideType { get; private set; }
    /// <summary>
    /// 每次附加buff添加的层数
    /// </summary>
    public int AddLayer { get; private set; }
    /// <summary>
    /// 每次生效所减少的层数
    /// </summary>
    public int ReduceLayer { get; private set; }
    /// <summary>
    /// 时长/回合数
    /// </summary>
    public int ActiveTime { get; private set; }
    /// <summary>
    /// 可被驱散类型
    /// </summary>
    public BuffDispelType DispelType { get; private set; }
    /// <summary>
    /// 是否显示出来
    /// </summary>
    public bool CanDisplay { get; private set; }
    /// <summary>
    /// 是否为负面buff
    /// </summary>
    public BuffGroup BuffGroup { get; private set; }

    public const int __ID__ = -1370631787;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in BuffTriggers) { _e?.Resolve(_tables); }
        VoidCaster?.Resolve(_tables);
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in BuffTriggers) { _e?.TranslateText(translator); }
        VoidCaster?.TranslateText(translator);
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "BuffTriggers:" + Bright.Common.StringUtil.CollectionToString(BuffTriggers) + ","
        + "Desc:" + Desc + ","
        + "VoidCaster:" + VoidCaster + ","
        + "OverrideType:" + OverrideType + ","
        + "AddLayer:" + AddLayer + ","
        + "ReduceLayer:" + ReduceLayer + ","
        + "ActiveTime:" + ActiveTime + ","
        + "DispelType:" + DispelType + ","
        + "CanDisplay:" + CanDisplay + ","
        + "BuffGroup:" + BuffGroup + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
