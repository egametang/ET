//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;



namespace ET
{

public sealed partial class ItemConfig :  Bright.Config.BeanBase 
{
    public ItemConfig(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Name = _buf.ReadString();
        Type = _buf.ReadInt();
        SubType = _buf.ReadInt();
        Quality = _buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);SalePrice = new System.Collections.Generic.List<id_value>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { id_value _e0;  _e0 = id_value.Deserializeid_value(_buf); SalePrice.Add(_e0);}}
        PileLimit = _buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ConditionData = new System.Collections.Generic.List<id_value>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { id_value _e0;  _e0 = id_value.Deserializeid_value(_buf); ConditionData.Add(_e0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);ConditionItem = new System.Collections.Generic.List<id_value>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { id_value _e0;  _e0 = id_value.Deserializeid_value(_buf); ConditionItem.Add(_e0);}}
        ContainerType = _buf.ReadInt();
        Icon = _buf.ReadString();
        Desc = _buf.ReadString();
        GetSource = _buf.ReadString();
        PostInit();
    }

    public static ItemConfig DeserializeItemConfig(ByteBuf _buf)
    {
        return new ItemConfig(_buf);
    }

    /// <summary>
    /// Id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 名称
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 类型
    /// </summary>
    public int Type { get; private set; }
    /// <summary>
    /// 子类型
    /// </summary>
    public int SubType { get; private set; }
    /// <summary>
    /// 品质
    /// </summary>
    public int Quality { get; private set; }
    /// <summary>
    /// 出售价格
    /// </summary>
    public System.Collections.Generic.List<id_value> SalePrice { get; private set; }
    /// <summary>
    /// 堆叠上限
    /// </summary>
    public int PileLimit { get; private set; }
    /// <summary>
    /// 使用条件-数据
    /// </summary>
    public System.Collections.Generic.List<id_value> ConditionData { get; private set; }
    /// <summary>
    /// 使用条件-物品
    /// </summary>
    public System.Collections.Generic.List<id_value> ConditionItem { get; private set; }
    /// <summary>
    /// 存储类型
    /// </summary>
    public int ContainerType { get; private set; }
    /// <summary>
    /// 图标
    /// </summary>
    public string Icon { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 获取途径
    /// </summary>
    public string GetSource { get; private set; }

    public const int __ID__ = -764023723;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in SalePrice) { _e?.Resolve(_tables); }
        foreach(var _e in ConditionData) { _e?.Resolve(_tables); }
        foreach(var _e in ConditionItem) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in SalePrice) { _e?.TranslateText(translator); }
        foreach(var _e in ConditionData) { _e?.TranslateText(translator); }
        foreach(var _e in ConditionItem) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "Type:" + Type + ","
        + "SubType:" + SubType + ","
        + "Quality:" + Quality + ","
        + "SalePrice:" + Bright.Common.StringUtil.CollectionToString(SalePrice) + ","
        + "PileLimit:" + PileLimit + ","
        + "ConditionData:" + Bright.Common.StringUtil.CollectionToString(ConditionData) + ","
        + "ConditionItem:" + Bright.Common.StringUtil.CollectionToString(ConditionItem) + ","
        + "ContainerType:" + ContainerType + ","
        + "Icon:" + Icon + ","
        + "Desc:" + Desc + ","
        + "GetSource:" + GetSource + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
